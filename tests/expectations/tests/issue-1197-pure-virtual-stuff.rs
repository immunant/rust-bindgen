/* automatically generated by rust-bindgen */

#![allow(
    dead_code,
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals
)]

#[repr(C)]
pub struct Foo__bindgen_vtable {
    _offset_to_top_0: isize,
    _rtti: *const ::std::os::raw::c_void,
    Bar: ::std::option::Option<
        unsafe extern "C" fn(this: *mut ::std::os::raw::c_void),
    >,
    _complete_destructor:
        ::std::option::Option<unsafe extern "C" fn(this: *mut Foo)>,
    _deleting_destructor:
        ::std::option::Option<unsafe extern "C" fn(this: *mut Foo)>,
}
#[repr(C)]
#[derive(Debug)]
pub struct Foo {
    pub vtable_: *const Foo__bindgen_vtable,
}
#[test]
fn bindgen_test_layout_Foo() {
    assert_eq!(
        ::std::mem::size_of::<Foo>(),
        8usize,
        concat!("Size of: ", stringify!(Foo))
    );
    assert_eq!(
        ::std::mem::align_of::<Foo>(),
        8usize,
        concat!("Alignment of ", stringify!(Foo))
    );
}
impl Default for Foo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
