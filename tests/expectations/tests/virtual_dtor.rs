/* automatically generated by rust-bindgen */

#![allow(
    dead_code,
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals
)]

#[repr(C)]
pub struct nsSlots__bindgen_vtable {
    _offset_to_top_0: isize,
    _rtti: *const ::std::os::raw::c_void,
    vfns: nsSlots__bindgen_vfns,
}
#[repr(C)]
pub struct nsSlots__bindgen_vfns {
    _complete_destructor:
        ::std::option::Option<unsafe extern "C" fn(this: *mut nsSlots)>,
    _deleting_destructor:
        ::std::option::Option<unsafe extern "C" fn(this: *mut nsSlots)>,
}
#[repr(C)]
#[derive(Debug)]
pub struct nsSlots {
    pub vtable_: *const nsSlots__bindgen_vfns,
}
#[test]
fn bindgen_test_layout_nsSlots() {
    assert_eq!(
        ::std::mem::size_of::<nsSlots>(),
        8usize,
        concat!("Size of: ", stringify!(nsSlots))
    );
    assert_eq!(
        ::std::mem::align_of::<nsSlots>(),
        8usize,
        concat!("Alignment of ", stringify!(nsSlots))
    );
}
impl Default for nsSlots {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_ZN7nsSlotsD1Ev"]
    pub fn nsSlots_nsSlots_destructor(this: *mut nsSlots);
}
